;; Test tail recursion elimination
> (define (t x y)
>   (if (= x 0)
>       y
>       (t (- x 1) (+ y 1))))
> (t 1000 0)
1000

;; Test tail call elimination for two different procedures
> (define (a x)
>   (if (= x 0)
>       x
>       (b (- x 1))))
> (define (b x)
>   (a x))
> (a 1000)
0

;; Check that namespaces are correctly preserved when tail call
;; elimination is in effect
> (define x 42)
> (define (a x) (b x))
> (define (b x) x)
> (a 3)
3
> x
42

;; Check correct behavior when tail recursion can't be used
> (define (s x)
>   (if (= x 0)
>       0
>       (+ (s (- x 1)) 1)))
> (s 100)
100

> (define (u x)
>   (if (= x 0)
>       x
>       (u (- x 1)))
>   x)
> (u 10)
10

> (define (v x)
>   (cond ((= x 0) x)
>         (else (v (- x 1))
>               x)))
> (v 10)
10
